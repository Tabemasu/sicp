#lang racket
(require r5rs)

;Double ended queue implementation, SICP exercise 3.23
(define (make-deque) (cons '() '()))
(define (front-deque deque) (car deque))
(define (rear-deque deque) (cdr deque))
(define (make-deque-item data rear-ptr front-ptr) (cons (cons data rear-ptr) front-ptr))
(define (get-next-item item) (cdr item))
(define (get-prev-item item) (cdar item))
(define (get-data item) (caar item))
(define (set-next-ptr! item new-ptr)
  (cond [(not (null? item)) (set-cdr! item new-ptr)]))
(define (set-prev-ptr! item new-ptr) 
  (cond [(not (null? item)) (set-cdr! (car item) new-ptr)]))
(define (empty-deque? deque)
  (null? (front-deque deque)))
(define (set-front-deque! deque item) (set-car! deque item))
(define (set-rear-deque! deque item) (set-cdr! deque item))
(define (front-insert-deque deque item)
  (let ([new-item (make-deque-item item '() (front-deque deque))])
    (if (empty-deque? deque)
        (begin (set-front-deque! deque new-item)
               (set-rear-deque! deque new-item))
        (begin (set-cdr! (car (front-deque deque)) new-item)
               (set-front-deque! deque new-item)))))
(define (rear-insert-deque deque item)
  (let ([new-item (make-deque-item item (rear-deque deque) '())])
        (if (empty-deque? deque)
        (begin (set-front-deque! deque new-item)
               (set-rear-deque! deque new-item))
        (begin (set-cdr! (rear-deque deque) new-item) 
               (set-rear-deque! deque new-item)))))
(define (front-remove-deque deque)
  (let ([next-item (get-next-item (front-deque deque))])
    (cond [(empty-deque? deque) (error "FRONT-REMOVE applied to an empty deque" deque)]
          [(null? next-item) (set-rear-deque! deque '())])
    (set-prev-ptr! next-item '())
    (set-front-deque! deque next-item)))
(define (rear-remove-deque deque)
  (let ([prev-item (get-prev-item (rear-deque deque))])
    (cond [(empty-deque? deque) (error "REAR-REMOVE applied to an empty deque" deque)]
          [(null? prev-item) (set-front-deque! deque '())])
    (set-next-ptr! prev-item '())
    (set-rear-deque! deque prev-item)))