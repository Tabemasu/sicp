#lang racket
(require r5rs)

;Exercise 3.12
(define (append! x y)
  (set-cdr! (last-pair x) y)
  x)
(define (last-pair x)
  (if (null? (cdr x))
      x
      (last-pair (cdr x))))

;Exericse 3.13
(define (make-cycle x)
  (set-cdr! (last-pair x) x)
  x)

;Exercise 3.14
(define (mystery x)
  (define (loop x y)
    (if (null? x)
        y
        (let ([temp (cdr x)])
          (set-cdr! x y)
          (loop temp x))))
  (loop x '()))

;Exercise 3.16
(define (count-pairs-bad x)
  (if (not (pair? x))
      0
      (+ (count-pairs-bad (car x))
         (count-pairs-bad (cdr x))
         1)))

;Exercise 3.17
(define (count-pairs x)
  (let ([counted-pairs '()])     
    (define (loop x)
      (cond [(not (pair? x)) 0]
            [(in? x counted-pairs) 0]
            [else (set! counted-pairs (cons x counted-pairs))
                  (+ (loop (car x))
                     (loop (cdr x))
                     1)]))
    (loop x)))
(define (in? x pairs)
      (cond [(null? pairs) #f]
            [(eq? x (car pairs)) #t]
            [else (in? x (cdr pairs))]))

;Exercise 3.18
(define (cycle? list)
  (let ([counted-pairs '()])
    (define (loop list)
      (cond [(not (pair? list)) #f]
            [(in? list counted-pairs) #t]
            [else (set! counted-pairs (cons list counted-pairs))
                  (or (loop (car list)) (loop (cdr list)))]))
    (loop list)))

;Exercise 3.19
(define (cycle?-2 items)
  (define (cycle-though item-1 item-2)
    (cond [(or (null? item-1) (null? item-2)) #f]
          [(eq? item-1 item-2) #t]
          [else (cycle-though (cdr item-1) (update item-2))]))
  (cond [(null? items) #f]
        [else (cycle-though (cdr items) (update items))]))
(define (update items)
  (if (pair? (cdr items)) 
      (cddr items)
      '()))
;End exercise

(define (front-ptr queue) (car queue))
(define (rear-ptr queue) (cdr queue))
(define (set-front-ptr! queue item) (set-car! queue item))
(define (set-rear-ptr! queue item) (set-cdr! queue item))
(define (empty-queue? queue) (null? (front-ptr queue)))
(define (make-queue) (cons '() '()))
(define (front-queue queue)
  (if (empty-queue? queue)
      (error "FRONT called with an empty queue" queue)
      (car (front-ptr queue))))
(define (insert-queue! queue item)
  (let ([new-pair (cons item '())])
    (if (empty-queue? queue)
        (begin (set-front-ptr! queue new-pair)
               (set-rear-ptr! queue new-pair)
               )
        (begin (set-cdr! (rear-ptr queue) new-pair)
               (set-rear-ptr! queue new-pair)
               ))))
(define (delete-queue! queue)
  (if (empty-queue? queue)
      (error "DELETE called with an empty queue" queue)
      (begin (set-front-ptr! queue (cdr (front-ptr queue)))
             )))

;Exercise 3.21
(define (print-queue queue)
  (front-ptr queue))

;Exercise 3.22
;(define (make-queue)
;  (let ([front-ptr '()]
;        [rear-ptr '()])
;    (define (insert-queue! item)
;      (let ([new-item (cons item '())])
;        (if (null? front-ptr)
;            (begin (set! front-ptr new-item)
;                   (set! rear-ptr new-item))
;            (begin (set-cdr! rear-ptr new-item)
;                   (set! rear-ptr new-item)))))
;    (define (delete-queue!)
;      (if (null? front-ptr)
;          (error "DELETE called on an empty queue" front-ptr)
;          (set! front-ptr (cdr front-ptr))))
;    (define (print-queue) front-ptr)
;    (define (empty-queue?) (null? front-ptr))
;    (define (dispatch m)
;      (cond [(eq? m 'insert) insert-queue!]
;            [(eq? m 'remove) (delete-queue!)]
;            [(eq? m 'print) (print-queue)]
;            [(eq? m 'empty) (empty-queue?)]
;            [else (error "unknown method on queues" m)]))
;    dispatch))
;(define (delete-queue! q) (q 'remove))
;(define (insert-queue! q i) ((q 'insert) i))
;(define (print-queue q) (q 'print))

;Exercise 3.23
(define (make-deque) (cons '() '()))
(define (front-deque deque) (car deque))
(define (rear-deque deque) (cdr deque))
(define (make-deque-item data rear-ptr front-ptr) (cons (cons data rear-ptr) front-ptr))
(define (get-next-item item) (cdr item))
(define (get-prev-item item) (cdar item))
(define (get-data item) (caar item))
(define (set-next-ptr! item new-ptr)
  (cond [(not (null? item)) (set-cdr! item new-ptr)]))
(define (set-prev-ptr! item new-ptr) 
  (cond [(not (null? item)) (set-cdr! (car item) new-ptr)]))
(define (empty-deque? deque)
  (null? (front-deque deque)))
(define (set-front-deque! deque item) (set-car! deque item))
(define (set-rear-deque! deque item) (set-cdr! deque item))
(define (front-insert-deque deque item)
  (let ([new-item (make-deque-item item '() (front-deque deque))])
    (if (empty-deque? deque)
        (begin (set-front-deque! deque new-item)
               (set-rear-deque! deque new-item))
        (begin (set-cdr! (car (front-deque deque)) new-item)
               (set-front-deque! deque new-item)))))
(define (rear-insert-deque deque item)
  (let ([new-item (make-deque-item item (rear-deque deque) '())])
        (if (empty-deque? deque)
        (begin (set-front-deque! deque new-item)
               (set-rear-deque! deque new-item))
        (begin (set-cdr! (rear-deque deque) new-item) 
               (set-rear-deque! deque new-item)))))
(define (front-remove-deque deque)
  (let ([next-item (get-next-item (front-deque deque))])
    (cond [(empty-deque? deque) (error "FRONT-REMOVE applied to an empty deque" deque)]
          [(null? next-item) (set-rear-deque! deque '())])
    (set-prev-ptr! next-item '())
    (set-front-deque! deque next-item)))
(define (rear-remove-deque deque)
  (let ([prev-item (get-prev-item (rear-deque deque))])
    (cond [(empty-deque? deque) (error "REAR-REMOVE applied to an empty deque" deque)]
          [(null? prev-item) (set-front-deque! deque '())])
    (set-next-ptr! prev-item '())
    (set-rear-deque! deque prev-item)))
;End exercise

;(define (make-table)
;  (let ((local-table (list '*table*)))
;    (define (lookup key-1 key-2)
;      (let ((subtable (assoc key-1 (cdr local-table))))
;        (if subtable
;            (let ((record (assoc key-2 (cdr subtable))))
;              (if record
;                  (cdr record)
;                  #f))
;              #f)))
;    (define (insert! key-1 key-2 value)
;      (let ((subtable (assoc key-1 (cdr local-table))))
;        (if subtable
;            (let ((record (assoc key-2 (cdr subtable))))
;              (if record
;                  (set-cdr! record value)
;                  (set-cdr! subtable
;                            (cons (cons key-2 value)
;                                  (cdr subtable)))))
;            (set-cdr! local-table
;                      (cons (list key-1 
;                                  (cons key-2 value))
;                            (cdr local-table)))))
;      'ok)
;    (define (dispatch m)
;      (cond ((eq? m 'lookup-proc) lookup)
;            ((eq? m 'insert-proc!) insert!)
;            (else (error "Unkown operation -- TABLE" m))))
;    dispatch))

;Exercise 3.24
;(define (make-table same-key?)
;  (let ((local-table (list '*table*)))
;    (define (lookup key-1 key-2)
;      (let ((subtable (assoc key-1 (cdr local-table))))
;        (if subtable
;            (let ((record (assoc key-2 (cdr subtable))))
;              (if record
;                  (cdr record)
;                  #f))
;              #f)))
;    (define (insert! key-1 key-2 value)
;      (let ((subtable (assoc key-1 (cdr local-table))))
;        (if subtable
;            (let ((record (assoc key-2 (cdr subtable))))
;              (if record
;                  (set-cdr! record value)
;                  (set-cdr! subtable
;                            (cons (cons key-2 value)
;                                  (cdr subtable)))))
;            (set-cdr! local-table
;                      (cons (list key-1 
;                                  (cons key-2 value))
;                            (cdr local-table)))))
;      'ok)
;    (define (assoc key records)
;      (cond ((null? records) #f)
;            ((same-key? key (caar records)) (car records))
;            (else (assoc key (cdr records)))))
;    (define (dispatch m)
;      (cond ((eq? m 'lookup-proc) lookup)
;            ((eq? m 'insert-proc!) insert!)
;            (else (error "Unkown operation -- TABLE" m))))
;    dispatch))
;(define table (make-table equal?))
;(define get (table 'lookup-proc))
;(define put (table 'insert-proc!))

;Exercise 3.25
(define (make-table same-key?)
  (let ((local-table (list '*table)))
    (define (lookup keys)
      (let ((record (assoc keys (cdr local-table))))
        (if record
            (cdr record)
            #f)))
    (define (insert! keys value)
      (let ((record (assoc keys (cdr local-table))))
        (if record
            (set-cdr! record value)
            (set-cdr! local-table (cons (cons keys value) (cdr local-table))))))
    (define (assoc key records)
      (cond ((or (null? records) (not (pair? records))) #f)
            ((same-key? key (caar records)) (car records))
            (else (assoc key (cdr records)))))
    (define (dispatch m)
      (cond ((eq? m 'lookup-proc) lookup)
            ((eq? m 'insert-proc!) insert!)
            ((eq? m 'print) local-table)
            (else (error "Unkown operation -- TABLE" m))))
    dispatch))
;End exercise
(define (test-signals sig . other-sigs)
  (let ((signals (cons sig other-sigs)))
    (define (loop signals)
      (if (null? signals) 
          'ok
          (let ((s (car signals)))
            (if (not (or (= s 0) (= s 1)))
                (error "Invalid signal" s)
                (loop (cdr signals))))))
    (loop signals)))
(define (logical-and s1 s2)
  (test-signals s1 s2)
  (if (and (= s1 1) (= s2 1)) 1 0))
(define (logical-or s1 s2)
  (test-signals s1 s2)
  (if (or (= s1 1) (= s2 1)) 1 0))
(define (logical-not s)
  (test-signals s)
  (if (= s 0) 1 0))
(define (inverter input output)
  (define (invert-input)
    (let ((new-value (logical-not (get-signal input))))
      (after-delay inverter-delay
                   (lambda ()
                     (set-signal! output new-value)))))
  (add-action! input invert-input)
  'ok)
(define (and-gate a1 a2 output)
  (define (and-action-procedure)
    (let ((new-value (logical-and (get-signal a1) (get-signal a2))))
      (after-delay and-gate-delay
                   (lambda ()
                     (set-signal! output new-value)))))
  (add-action! a1 and-action-procedure)
  (add-action! a2 and-action-procedure)
  'ok)
(define (half-adder a b s c)
  (let ((d (make-wire)) (e (make-wire)))
    (or-gate a b d)
    (and-gate a b c)
    (inverter c e)
    (and-gate d e s)
    'ok))
(define (full-adder a b c-in sum c-out)
  (let ((s (make-wire))
        (c1 (make-wire))
        (c2 (make-wire)))
    (half-adder b c-in s c1)
    (half-adder a s sum c2)
    (or-gate c1 c2 c-out)
    'ok))
;Exercise 3.28
(define (or-gate o1 o2 output)
  (define (or-action-procedure)
    (let ((new-value (logical-or (get-signal o1) (get-signal o2))))
      (after-delay or-gate-delay
                   (lambda ()
                     (set-signal! output new-value)))))
  (add-action! o1 or-action-procedure)
  (add-action! o2 or-action-procedure)
  'ok)

;Exercise 3.29
(define (or-gate-2 o1 o2 output)
  (let ((i1 (make-wire))
        (i2 (make-wire))
        (a (make-wire)))
    (inverter o1 i1)
    (inverter o2 i2)
    (and-gate i1 i2 a)
    (inverter a output))
  'ok)

;Exercise 3.30
(define (ripple-carry-adder a b s c)
  (define (loop a b s c)
    (if (null? a) 
        'ok
        (let ((this-a (car a))
              (this-b (car b))
              (this-s (car s))
              (new-c (make-wire)))
          (full-adder this-a this-b c this-s new-c)
          (loop (cdr a) (cdr b) (cdr s) new-c))))
  (if (same-length? a b s)
      (loop a b s c)
      (error "All lists are not of the same length" a b s)))
(define (same-length? l1 l2 . ls)
  (define (loop ls)
    (if (null? (cdr ls))
        #t
        (let ((l1 (car ls))
              (l2 (cadr ls)))
          (if (and (pair? l1) (pair? l2))
              (if (= (length l1) (length l2))
                  (loop (cdr ls))
                  #f)
               (error "All arguments are not lists" l1 l2 ls)))))
  (if (null? ls) 
      (= (length l1) (length l2))
      (loop (cons l1 (cons l2 ls)))))
;End Exercise

(define (make-wire)
  (let ((signal-value 0) (action-procedures '()))
    (define (set-my-signal! new-value)
      (if (not (= signal-value new-value))
          (begin (set! signal-value new-value)
                 (call-each action-procedures))
          'done))
    (define (accept-action-procedure! proc)
      (set! action-procedures (cons proc action-procedures))
      (proc))
    (define (dispatch m)
      (cond ((eq? m 'get-signal) signal-value)
            ((eq? m 'set-signal!) set-my-signal!)
            ((eq? m 'add-action!) accept-action-procedure!)
            (else (error "Unknown operation --WIRE" m))))
    dispatch))
(define (call-each procedures)
  (if (null? procedures)
      'done
      (begin ((car procedures))
             (call-each (cdr procedures)))))
(define (get-signal wire)
  (wire 'get-signal))
(define (set-signal! wire new-value)
  ((wire 'set-signal!) new-value))
(define (add-action! wire action-procedure)
  ((wire 'add-action!) action-procedure))
(define (after-delay delay action)
  (add-to-agenda! (+ delay (current-time the-agenda))
                  action
                  the-agenda))
(define (propagate)
  (if (empty-agenda? the-agenda)
      'done
      (let ((first-item (first-agenda-item the-agenda)))
        (first-item)
        (remove-first-agenda-item! the-agenda)
        (propagate))))
(define (make-time-segment time queue)
  (cons time queue))
(define (segment-time s) (car s))
(define (segment-queue s) (cdr s))
(define (make-agenda) (list 0))
(define (current-time agenda) (car agenda))
(define (set-current-time! agenda time)
  (set-car! agenda time))
(define (segments agenda) (cdr agenda))
(define (set-segments! agenda segments)
  (set-cdr! agenda segments))
(define (first-segment agenda) (car (segments agenda)))
(define (rest-segments agenda) (cdr (segments agenda)))
(define (empty-agenda? agenda)
  (null? (segments agenda)))
(define (add-to-agenda! time action agenda)
  (define (belongs-before? segments)
    (or (null? segments)
        (< time (segment-time (car segments)))))
  (define (make-new-time-segment time action)
    (let ((q (make-queue)))
      (insert-queue! q action)
      (make-time-segment time q)))
  (define (add-to-segments! segments)
    (if (= (segment-time (car segments)) time)
        (insert-queue! (segment-queue (car segments))
                       action)
        (let ((rest (cdr segments)))
          (if (belongs-before? rest)
              (set-cdr! segments
                        (cons (make-new-time-segment time action)
                              (cdr segments)))
              (add-to-segments! rest)))))
  (let ((segments (segments agenda)))
    (if (belongs-before? segments)
        (set-segments! agenda
                       (cons (make-new-time-segment time action)
                             segments))
        (add-to-segments! segments))))
(define (remove-first-agenda-item! agenda)
  (let ((q (segment-queue (first-segment agenda))))
    (delete-queue! q)
    (if (empty-queue? q)
        (set-segments! agenda (rest-segments agenda)))))
(define (first-agenda-item agenda)
  (if (empty-agenda? agenda)
      (error "Agenda is empty -- FIRST-AGENDA-ITEM" agenda)
      (let ((first-seg (first-segment agenda)))
        (set-current-time! agenda (segment-time first-seg))
        (front-queue (segment-queue first-seg)))))
(define (probe name wire)
  (add-action! wire
               (lambda ()
                 (newline)
                 (display name)
                 (display " ")
                 (display (current-time the-agenda))
                 (display "  New-value = ")
                 (display (get-signal wire)))))
(define inverter-delay 3)
(define or-gate-delay 5)
(define and-gate-delay 2)
(define the-agenda (make-agenda))



(define (adder a1 a2 sum)
  (define (process-new-value)
    (cond ((and (has-value? a1) (has-value? a2))
           (set-value! sum
                       (+ (get-value a1) (get-value a2))
                       me))
          ((and (has-value? a1) (has-value? sum))
           (set-value! a2
                       (- (get-value sum) (get-value a1))
                       me))
          ((and (has-value? a2) (has-value? sum))
           (set-value! a1
                       (- (get-value sum) (get-value a2))
                       me))))
  (define (process-forget-value)
    (forget-value! sum me)
    (forget-value! a1 me)
    (forget-value! a2 me)
    (process-new-value))
  (define (me request)
    (cond ((eq? request 'I-have-a-value)
           (process-new-value))
          ((eq? request 'I-lost-my-value)
           (process-forget-value))
          (else
           (error "Unknown request -- ADDER" request))))
  (connect a1 me)
  (connect a2 me)
  (connect sum me)
  me)
(define (multiplier m1 m2 product)
  (define (process-new-value)
    (cond ((or (and (has-value? m1) (= (get-value m1) 0))
               (and (has-value? m2) (= (get-value m2) 0)))
           (set-value! product 0 me))
          ((and (has-value? m1) (has-value? m2))
           (set-value! product
                       (* (get-value m1) (get-value m2))
                       me))
          ((and (has-value? product) (has-value? m1))
           (set-value! m2
                       (/ (get-value product) (get-value m1))
                       me))
          ((and (has-value? product) (has-value? m2))
           (set-value! m1
                       (/ (get-value product) (get-value m2))
                       me))))
  (define (process-forget-value)
    (forget-value! product me)
    (forget-value! m1 me)
    (forget-value! m2 me)
    (process-new-value))
  (define (me request)
    (cond ((eq? request 'I-have-a-value)
           (process-new-value))
          ((eq? request 'I-lost-my-value)
           (process-forget-value))
          (else
           (error "Unknown request -- MULTIPLIER" request))))
  (connect m1 me)
  (connect m2 me)
  (connect product me)
  me)
(define (constant value connector)
  (define (me request)
    (error "Unknown request -- CONSTANT" request))
  (connect connector me)
  (set-value! connector value me)
  me)
(define (inform-about-value constraint)
  (constraint 'I-have-a-value))
(define (inform-about-no-value constraint)
  (constraint 'I-lost-my-value))
(define (probe-c name connector)
  (define (print-probe value)
    (newline)
    (display "Probe: ")
    (display name)
    (display " = ")
    (display value)
    (newline))
  (define (process-new-value)
    (print-probe (get-value connector)))
  (define (process-forget-value)
    (print-probe "?"))
  (define (me request)
    (cond ((eq? request 'I-have-a-value)
           (process-new-value))
          ((eq? request 'I-lost-my-value)
           (process-forget-value))
          (else
           (error "Unknown request -- PROBE" request))))
  (connect connector me)
  me)
(define (make-connector)
  (let ((value #f) (informant #f) (constraints '()))
    (define (set-my-value newval setter)
      (cond ((not (has-value? me))
             (set! value newval)
             (set! informant setter)
             (for-each-except setter
                              inform-about-value
                              constraints))
            ((not (= value newval))
             (error "Contradiction" (list value newval)))
            (else 'ignored)))
    (define (forget-my-value retractor)
      (if (eq? retractor informant)
          (begin (set! informant #f)
                 (for-each-except retractor
                                  inform-about-no-value
                                  constraints))
          'ignored))
    (define (connect new-constraint)
      (if (not (memq new-constraint constraints))
          (set! constraints
                (cons new-constraint constraints)))
      (if (has-value? me)
          (inform-about-value new-constraint))
      'done)
    (define (me request)
      (cond ((eq? request 'has-value?)
             (if informant true false))
            ((eq? request 'value) value)
            ((eq? request 'set-value!) set-my-value)
            ((eq? request 'forget) forget-my-value)
            ((eq? request 'connect) connect)
            (else (error "Unknown operation -- CONNECTOR"
                         request))))
    me))
(define (for-each-except exception procedure list)
  (define (loop items)
    (cond ((null? items) 'done)
          ((eq? (car items) exception) (loop (cdr items)))
          (else (procedure (car items))
                (loop (cdr items)))))
  (loop list))
(define (has-value? connector)
  (connector 'has-value?))
(define (get-value connector)
  (connector 'value))
(define (set-value! connector new-value informant)
  ((connector 'set-value!) new-value informant))
(define (forget-value! connector retractor)
  ((connector 'forget) retractor))
(define (connect connector new-constraint)
  ((connector 'connect) new-constraint))

;Exercise 3.33
(define (averager a b c)
  (let ((con (make-connector))
        (sum (make-connector)))
    (constant 0.5 con)
    (adder a b sum)
    (multiplier sum con c)
    'ok))

;Exercise 3.35
(define (squarer a b)
  (define (process-new-value)
    (if (has-value? b)
        (if (< (get-value b) 0)
            (error "square less than 0 -- SQUARE" (get-value b))
            (set-value! a
                        (sqrt (get-value b))
                        me))
        (let ((base (get-value a)))
          (set-value! b
                      (* base base)
                      me))))
  (define (process-forget-value)
    (forget-value! a me)
    (forget-value! b me)
    (process-new-value))
  (define (me request)
    (cond ((eq? request 'I-have-a-value)
           (process-new-value))
          ((eq? request 'I-lost-my-value)
           (process-forget-value))
          (else
           (error "Unknown request -- SQUARER" request))))
  (connect a me)
  (connect b me)
  me)

;Exercise 3.37
(define (celsius-fahrenheit-converter x)
  (c+ (c* (c/ (cv 9) (cv 5))
          x)
      (cv 32)))
(define (c+ x y)
  (let ((z (make-connector)))
    (adder x y z)
    z))
(define (c* x y)
  (let ((z (make-connector)))
    (multiplier x y z)
    z))
(define (c/ x y)
  (let ((z (make-connector)))
    (multiplier y z x)
    z))
(define (cv n)
  (let ((x (make-connector)))
    (constant n x)
    x))