#lang racket
;Section 4.1.1
(define (my-eval exp env)
 (cond ((self-evaluating? exp) exp)
        ((variable? exp) (lookup-variable-value exp env))
        ((quoted? exp) (text-of-quotation exp))
        ((assignment? exp) (eval-assignment exp env))
        ((definition? exp) (eval-definition exp env))
        ((if? exp) (eval-if exp env))
        ((lambda? exp)
         (make-procedure (lambda-parameters exp)
                         (lambda-body exp)
                         env))
        ((let? exp)
         (my-eval (let->combination exp env))
        ((let*? exp)
         (my-eval (let*->nested-lets exp env))
        ((begin? exp)
         (eval-sequence (begin-actions exp) env))
        ((cond? exp) (my-eval (cond->if exp) env))
        ((or? exp) (eval-or (or-exps exp) env))
        ((and? exp) (eval-and (and-exps exp) env))
        ((application? exp)
         (my-apply (my-eval (operator exp) env)
                   (list-of-values (operands exp) env)))
        (else
         (error "Unknown expression type -- EVAL" exp))))
(define (list-of-values exps env)
  (if (no-operands? exps)
      '()
      (cons (my-eval (first-operand exps) env)
            (list-of-values (rest-operands exps) env))))
(define (eval-if exp env)
  (if (true? (my-eval (if-predicate exp) env))
      (my-eval (if-consequent exp) env)
      (my-eval (if-alternative exp) env)))
(define (eval-sequence exps env)
  (cond ((last-exp? exps) (my-eval (first-exp exps) env))
        (else (my-eval (first-exp env))
              (eval-sequence (rest-exps exps) env))))
(define (eval-assignment exp env)
  (set-variable-value! (assignment-variable exp)
                       (my-eval (assightmnet-value exp) env)
                       env)
  'ok)
(define (eval-definition exp env)
  (define-variable! (definition-variable exp)
                    (my-eval (definition-value exp) env)
                    env)
  'ok)
(define (my-apply procedure arguments)
  (cond ((primitive-procedure? procedure)
         (apply-primitive-procedure procedure arguments))
        ((compound-procedure? procedure)
         (eval-sequence
          (procedure-body procedure)
          (extend-environment
           (procedure-parameters procedure)
           arguments
           (procedure-environment procedure))))
        (else
         (error "Unknown procedure type -- APPLY" procedure))))

;Exercise 4.1
(define (list-of-values-left exps env)
  (if (no-operands? exps)
      '()
      (let* ((left (my-eval (first-operand exps) env))
             (right (list-of-values (rest-operands exps) env)))
        (cons left right))))
(define (list-of-values-right exps env)
  (if (no-operands? exps)
      '()
      (let* ((right (list-of-values (rest-operands exps) env))
             (left (my-eval (first-operand exps) env)))
        (cons left right))))

;Section 4.1.2
(define (self-evaluating? exp)
  (cond ((number? exp) #t)
        (else (string? exp))))
(define (variable? exp) (symbol? exp))
(define (quoted? exp)
  (tagged-list? exp 'quote))
(define (text-of-quotation exp) (cadr exp))
(define (tagged-list? exp tag)
  (if (pair? exp)
      (eq? (car exp) tag)
      #f))
(define (assignment? exp)
  (tagged-list? exp 'set!))
(define (assignment-variable exp) (cadr exp))
(define (assignment-value exp) (caddr exp))
(define (definition? exp)
  (tagged-list? exp 'define))
(define (definition-variable exp)
  (if (symbol? (cadr exp))
      (cadr exp)
      (caadr exp)))
(define (definition-value exp)
  (if (symbol? (cadr exp))
      (caddr exp)
      (make-lambda (cdadr exp)
                   (cddr exp))))
(define (lambda? exp) (tagged-list? exp 'lambda))
(define (lambda-parameters exp) (cadr exp))
(define (lambda-body exp) (cddr exp))
(define (make-lambda parameters body)
  (cons 'lambda (cons parameters body)))
(define (if? exp) (tagged-list? exp 'if))
(define (if-predicate exp) (cadr exp))
(define (if-consequent exp) (caddr exp))
(define (if-alternative exp)
  (if (not (null? (cdddr exp)))
      (cadddr exp)
      'false))
(define (make-if predicate consequent alternative)
  (list 'if predicate consequent alternative))
(define (begin? exp) (tagged-list? exp 'begin))
(define (begin-actions exp) (cdr exp))
(define (last-exp? seq) (null? (cdr seq)))
(define (first-exp seq) (car seq))
(define (rest-exps seq) (cdr seq))
(define (sequence->exp seq)
  (cond ((null? seq) seq)
        ((last-exp? seq) (first-exp seq))
        (else (make-begin seq))))
(define (make-begin seq) (cons 'begin seq))
(define (application? exp) (pair? exp))
(define (operator exp) (car exp))
(define (operands exp) (cdr exp))
(define (no-operands? ops) (null? ops))
(define (first-operand ops) (car ops))
(define (rest-operands ops) (cdr ops))
(define (cond? exp) (tagged-list? exp 'cond))
(define (cond-clauses exp) (cdr exp))
(define (cond-else-clause? clause)
  (eq? (cond-predicate clause) 'else))
(define (cond-predicate clause) (car clause))
(define (cond-actions clause) (cdr clause))
(define (cond->if exp)
  (expand-clauses (cond-clauses exp)))

;Exercise 4.2
;(define (application? exp) (tagged-list? exp 'call))
;(define (operator exp) (cadr exp))
;(define (operands exp) (cddr exp))

;Exercise 4.3
;(put 'set! eval-assignment)
;(put 'define eval-definition)
;(put 'if eval-if)
;(put 'lambda eval-lambda)
;(put 'begin eval-begin)
;(put 'cond eval-cond)
;(put 'quote eval-quoted)
;(define (eval-lambda exp env)
;  (make-procedure (lambda-parameters exp)
;                  (lambda-body exp)
;                  env))
;(define (eval-begin exp env)
;  (eval-sequence (begin-actions exp) env))
;(define (eval-cond exp env)
;  (my-eval (cond->if exp) env))
;(define (eval-quoted exp env)
;  (test-of-quotation exp))
;(define (my-eval exp env)
;  (cond ((self-evaluating? exp) exp)
;        ((variable? exp) (lookup-variable-value exp env))
;        (else (let ((ev-proc (get (car exp))))
;                (cond (ev-proc (ev-proc exp env))
;                      ((application? exp)
;                       (my-apply (my-eval (operator exp) env)
;                                 (list-of-values (operands exp) env)))
;                      (else (error "Unknown expression type -- EVAL" exp)))))))

;Exercise 4.4
(define (short-circut seq env short?)
  (if (null? seq)
      'true
      (let ((first (my-eval (first-exp seq) env))
            (rest (rest-exps seq)))
        (cond ((null? rest) first)
              ((short? first) first)
              (else (short-circut rest env short?))))))
(define (and? exp) (tagged-list? exp 'and))
(define (and-exps exp) (cadr exp))
;(define (eval-and exp env)
;  (short-circut exp env false?))
(define (or? exp) (tagged-list? exp 'or))
(define (or-exps exp) (cadr exp))
;(define (eval-or exp env)
;  (short-circut exp env true?))
;Is there a good abstraction for these two procedures?
(define (and->if seq)
  (if ((null? seq) 
       'true
       (let ((first (first-exp seq))
             (rest (rest-exps seq)))
         (make-if first
                  (if (null? rest)
                      first
                      (and->if rest))
                  'false)))))
(define (or->if seq)
  (if ((null? seq)
       'false
       (let ((first (first-exp seq))
             (rest (rest-exps seq)))
         (make-if first
                  first
                  (or->if rest))))))
(define (eval-and exp env)
  (my-eval (and->if exp) env))
(define (eval-or exp env)
  (my-eval (or->if exp) env))

;Exercise 4.5
(define (cond-test clause) (car clause))
(define (cond-recipient clause) (caddr clause))
(define (cond-=>-clause? clause)
  (eq? (cadr clause) '=>))
(define (expand-clauses clauses)
  (if (null? clauses)
      'false
      (let ((first (car clauses))
            (rest (cdr clauses)))
        (cond ((cond-else-clause? first)
               (if (null? rest)
                   (sequence->exp (cond-actions first))
                   (error "ELSE clause isn't last -- COND->IF"
                          clauses)))
              ((cond-=>-clause? first)
               (make-if (cond-test first)
                        (list (cond-recipient first) (cond-test first))
                        (expand-clauses rest)))
              (else (make-if (cond-predicate first)
                     (sequence->exp (cond-actions first))
                     (expand-clauses rest)))))))
;Exercise 4.6
(define (let? exp) (tagged-list? exp 'let))
(define (let-params exp) (map car (cadr exp)))
(define (let-vals exp) (map cadr (cadr exp)))
(define (let-body exp) (cdr exp))
;(define (let->combination exp)
;  (cons (make-lambda (let-params exp) (let-body exp)) 
;          (let-vals exp)))

;Exercise 4.7
(define (let*? exp) (tagged-list? exp 'let*))
(define (let*-par-val-pairs exp) (cdar exp))
(define (let*-body exp) (caddr exp))
(define (make-let pv-pairs body)
  (cons 'let (cons pv-pairs body)))
(define (let*->nested-lets exp)
    (expand-let* (let*-par-val-pairs exp)
                 (let*-body exp)))
(define (expand-let* pv-pairs body)
  (if (null? pv-pairs)
      body
      (make-let (list (first pv-pairs))
                (list (expand-let* (rest pv-pairs) body)))))

;Exercise 4.8
(define (make-func-definition name params body)
  (cons 'define (cons (append (list name) params) body)))
(define (let-name exp) (cadr exp))
(define (let-named-params exp) (let-params (cdr exp)))
(define (let-named-vals exp) (let-vals (cdr exp)))
(define (let-named-body exp) (let-body (cdr exp)))
(define (named-let? exp)
  (symbol? (cadr exp)))
(define (let->combination exp)
  (if (named-let? exp)
      (let ((name (let-name exp))
            (params (let-named-params exp))
            (vals (let-named-vals exp))
            (body (let-named-body exp)))
        (sequence->exp 
         (list (make-func-definition name params body)
               (append name vals))))          
      (cons (make-lambda (let-params exp) (let-body exp)) 
            (let-vals exp))))

;Exercise 4.9
;While usage: (while <condition> <body>)
(define (while? exp) (tagged-list? exp 'while))
(define (while-condition exp) (car exp))
(define (while-body exp) (cdr exp))
(define (eval-while exp)
  (while->combination (cdr exp)))
;Add eval-while to my-eval
(define (while->combination exp)
  (sequence->exp
   (list (make-func-definition 
          'while-func 
          '() 
          (list (make-if (while-condition exp)
                         (sequence->exp 
                          (list (while-body exp)
                                '(while-func)))
                         'false)))
         '(while-func))))
